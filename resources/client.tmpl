// Generated by Protostub
// see more examples: https://github.com/lovelyoyrmia/protostub
// Implement your logic below

package {{.Package}}

import (
    {{ .ProtoPackage }} "{{ .GoPackage }}"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// {{ .ServiceName }}Client implements the gRPC client for {{ .ServiceName }}.
// It holds the gRPC client that will be used to make remote procedure calls to the {{ .ServiceName }}.
type {{ .ServiceName }}Client struct {
	Client {{ .ProtoPackage }}.{{ .ServiceName }}Client
}

// Init{{ .ServiceName }}Client initializes a new gRPC client for {{ .ServiceName }}.
// It takes a server URL as input, sets up a gRPC connection, and returns the initialized client.
//
// url: The address of the gRPC server to connect to.
//
// Returns:
// - A pointer to the initialized {{ .ServiceName }}Client.
// - An error if the connection setup fails.
func Init{{ .ServiceName }}Client(url string) (*{{ .ServiceName }}Client, error) {
	cc, err := grpc.NewClient(url, grpc.WithTransportCredentials(insecure.NewCredentials()))

	if err != nil {
		return nil, err
	}

	c := {{ .ServiceName }}Client{
		Client: {{ .ProtoPackage }}.New{{ .ServiceName }}Client(cc),
	}

	return &c, nil
}